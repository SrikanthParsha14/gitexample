Quick setup — if you’ve done this kind of thing before

https://github.com/SrikanthParsha14/Testrepo.git

--create a new repository on the command line

echo "# Testrepo" >> README.md
git init
git add README.md
git commit -m "first commit"
git remote add origin https://github.com/SrikanthParsha14/Testrepo.git
git push -u origin master

--push an existing repository from the command line

git remote add origin https://github.com/SrikanthParsha14/Testrepo.git
git push -u origin master

--import code from another repository
You can initialize this repository with code from a Subversion, Mercurial, or TFS project.

$git status  //status check make changes to the code
$git add -A //stage
****************************************************************
Git is Distributed Version Control system
*******************************************************
SCM- Software Configuration Management/Source Code Management
CVCS-Centralized version Control System
DVCS-Distributed Version Control System
***************************************************
GitHub
GitLab
Bitbucket(Atlassian)
*************************************************
1.Create a Repository
--From a tarball
$ tar xzf project.tar.gz
$ cd project
$ git init
Initialized empty Git repository in .git/
$ git add .
$ git commit

--From a remote repository
$ git clone git://example.com/pub/project.git
$ cd project

2.Create a Branch
--Managing branches
$ git branch			# list all local branches in this repo
$ git switch test	    # switch working directory to branch "test"
$ git branch new		# create branch "new" starting at current HEAD
$ git branch -d new		# delete branch "new"

--Instead of basing a new branch on current HEAD (the default), use:
$ git branch new test    # branch named "test"
$ git branch new v2.6.15 # tag named v2.6.15
$ git branch new HEAD^   # commit before the most recent
$ git branch new HEAD^^  # commit before that
$ git branch new test~10 # ten commits before tip of branch "test"

--Create and switch to a new branch at the same time:
$ git switch -c new v2.6.15

--Update and examine branches from the repository you cloned from:
$ git fetch		    # update
$ git branch -r		# list
  origin/master
  origin/next
  ...
$ git switch -c masterwork origin/master

--Fetch a branch from a different repository, and give it a new name in your repository:
$ git fetch git://example.com/project.git theirbranch:mybranch
$ git fetch git://example.com/project.git v2.6.15:mybranch

--Keep a list of repositories you work with regularly:
$ git remote add example git://example.com/project.git
$ git remote			# list remote repositories
example
origin
$ git remote show example	# get details
* remote example
  URL: git://example.com/project.git
  Tracked remote branches
    master
    next
    ...
$ git fetch example		# update branches from example
$ git branch -r			# list all remote branches

3.Make a Commit
4.Open a Pull Request
5.Merge Pull Request

*********Exploring history*******
$ gitk			    # visualize and browse history
$ git log		    # list all commits
$ git log src/		    # ...modifying src/
$ git log v2.6.15..v2.6.16  # ...in v2.6.16, not in v2.6.15
$ git log master..test	    # ...in branch test, not in branch master
$ git log test..master	    # ...in branch master, but not in test
$ git log test...master	    # ...in one branch, not in both
$ git log -S'foo()'	    # ...where difference contain "foo()"
$ git log --since="2 weeks ago"
$ git log -p		    # show patches as well
$ git show		    # most recent commit
$ git diff v2.6.15..v2.6.16 # diff between two tagged versions
$ git diff v2.6.15..HEAD    # diff with current head
$ git grep "foo()"	    # search working directory for "foo()"
$ git grep v2.6.15 "foo()"  # search old tree for "foo()"
$ git show v2.6.15:a.txt    # look at old version of a.txt

--Search for regressions:
$ git bisect start
$ git bisect bad		        # current version is bad
$ git bisect good v2.6.13-rc2	# last known good revision
Bisecting: 675 revisions left to test after this
				        # test here, then:
$ git bisect good		# if this revision is good, or
$ git bisect bad		# if this revision is bad.
				        # repeat until done.

--Making changes
Make sure Git knows who to blame:
$ cat >>~/.gitconfig <<\EOF
[user]
	name = Your Name Comes Here
	email = you@yourdomain.example.com
EOF

--Select file contents to include in the next commit, then make the commit:

$ git add a.txt    # updated file
$ git add b.txt    # new file
$ git rm c.txt     # old file
$ git commit

Or, prepare and create the commit in one step:

$ git commit d.txt # use latest content only of d.txt
$ git commit -a	   # use latest content of all tracked files

--Merging
$ git merge test   # merge branch "test" into the current branch
$ git pull git://example.com/project.git master		   # fetch and merge in remote branch
$ git pull . test  # equivalent to git merge test

--Sharing your changes
--Importing or exporting patches:

$ git format-patch origin..HEAD # format a patch for each commit
								# in HEAD but not in origin
$ git am mbox # import patches from the mailbox "mbox"

--Fetch a branch in a different Git repository, then merge into the current branch:
$ git pull git://example.com/project.git theirbranch

--Store the fetched branch into a local branch before merging into the current branch:
$ git pull git://example.com/project.git theirbranch:mybranch

--After creating commits on a local branch, update the remote branch with your commits:
$ git push ssh://example.com/project.git mybranch:theirbranch

--When remote and local branch are both named "test":
$ git push ssh://example.com/project.git test

--Shortcut version for a frequently used remote repository:
$ git remote add example ssh://example.com/project.git
$ git push example test

--Repository maintenance
--Check for corruption:
$ git fsck

--Recompress, remove unused cruft:
$ git gc


*********************************************************************************************
git branch develop

git branch

git checkout develop

git status

git commit -am "added somthing new"

git log 

git checkout master

git checkout -b feature/new-feature 

git merge feature/new-feature

git log

******************************
*********Initialization*******
1. Navigate to Project Folder
2. git init
3. git status
********Commits***************
1. git add .
2. git commit -m "---"
3. git log
4. git checkout ...
5. git checkout -- .
6. git reset --hard ...
********Branch****************
1. git branch
2. git checkout ..
3. git checkout -b ...
4. git merge ...
5. git branch -D ...

********************************
How to get a Git repository

$ git clone git://git.kernel.org/pub/scm/git/git.git
(or)
$ git clone git://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git


************Branch********
A "branch" is an active line of development.
The most recent commit on a branch is referred to as the tip of that branch.
The tip of the branch is referenced by a branch head, which moves forward as additional development is done on the branch.

A single Git repository can track an arbitrary number of branches, but your working tree is associated with just one of them 
(the "current" or "checked out" branch), and HEAD points to that branch.

---Commit--------------

As a noun: A single point in the Git history; 
the entire history of a project is represented as a set of interrelated commits.
The word "commit" is often used by Git in the same places other revision control systems use the words "revision" or "version".

As a verb: The action of storing a new snapshot of the project’s state in the Git history,
by creating a new commit representing the current state of the index and advancing HEAD to point at the new commit.

********Fetch********
Fetching a branch means to get the branch’s head ref from a remote repository,
to find out which objects are missing from the local object database, and to get them, too.

******head**********
A named reference to the commit at the tip of a branch.
Heads are stored in a file in $GIT_DIR/refs/heads/ directory, except when using packed refs. 

*******HEAD**************
The current branch.
In more detail: Your working tree is normally derived from the state of the tree referred to by HEAD.
HEAD is a reference to one of the heads in your repository, except when using a detached HEAD, in which case it directly references an arbitrary commit.

*****Merge**************
As a verb: To bring the contents of another branch (possibly from an external repository) into the current branch.
In the case where the merged-in branch is from a different repository, this is done by first fetching the remote branch 
and then merging the result into the current branch.This combination of fetch and merge operations is called a pull. 
Merging is performed by an automatic process that identifies changes made since the branches diverged, and then applies all those changes together.
In cases where changes conflict, manual intervention may be required to complete the merge.

*********Origin**********
The default upstream repository.
Most projects have at least one upstream project which they track. By default origin is used for that purpose.
New upstream updates will be fetched into remote-tracking branches named origin/name-of-upstream-branch, which you can see using git branch -r.

*********Pull************
Pulling a branch means to fetch it and merge it.

*******Push**********
Pushing a branch means to get the branch’s head ref from a remote repository,
find out if it is an ancestor to the branch’s local head ref, and in that case, putting all objects,
which are reachable from the local head ref, and which are missing from the remote repository,
into the remote object database, and updating the remote head ref.
If the remote head is not an ancestor to the local head, the push fails.